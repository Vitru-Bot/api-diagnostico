const express = require('express');
const app = express();
const PORT = 3000;

// Middleware para permitir que o Express leia JSON do corpo da requisiÃ§Ã£o
app.use(express.json());

// --- BASE DE CONHECIMENTO (ExtraÃ­da do seu documento) ---
// Mapeia cada resposta possÃ­vel para o seu perfil correspondente.
const respostasParaPerfil = {
    // Iniciante
    "O medo de dar errado antes mesmo de comeÃ§ar": "Iniciante",
    "Ainda Ã© tudo na base do improviso e da intuiÃ§Ã£o": "Iniciante",
    "Vou apagando incÃªndios na hora": "Iniciante",
    "Ainda estou tentando conquistar os primeiros": "Iniciante",
    "Entender como o negÃ³cio pode dar certo": "Iniciante",

    // Em Crescimento
    "A confusÃ£o de ter muita demanda e pouca organizaÃ§Ã£o": "Em Crescimento",
    "JÃ¡ tenho algum controle, mas ainda me enrolo com fluxo de caixa": "Em Crescimento",
    "Corro atrÃ¡s de processos para organizar, mas sinto que nÃ£o dou conta": "Em Crescimento",
    "Tenho clientes, mas ainda dependo de indicaÃ§Ã£o ou redes sociais bÃ¡sicas": "Em Crescimento",
    "Organizar processos e equipes para crescer sem perder o controle": "Em Crescimento",

    // Consolidado
    "A estagnaÃ§Ã£o de fazer mais do mesmo sem enxergar futuro": "Consolidado",
    "Tenho planilhas, relatÃ³rios e atÃ© consultorias": "Consolidado",
    "Tenho equipe, plano e estratÃ©gia para lidar com crises": "Consolidado",
    "JÃ¡ tenho base sÃ³lida de clientes e canais de relacionamento estruturados": "Consolidado",
    "Evitar ficar na zona de conforto e manter o ritmo": "Consolidado",

    // VisionÃ¡rio
    "A ilusÃ£o de ter mil ideias mas sem saber como colocar em prÃ¡tica": "VisionÃ¡rio",
    "Uso finanÃ§as como ferramenta estratÃ©gica para apostar em projetos": "VisionÃ¡rio",
    "JÃ¡ penso em como transformar o problema em uma oportunidade de inovaÃ§Ã£o": "VisionÃ¡rio",
    "Busco expandir para outros mercados e criar experiÃªncias Ãºnicas": "VisionÃ¡rio",
    "Transformar ideias ousadas em realidade sem se perder no caminho": "VisionÃ¡rio"
};

// Mapeia cada perfil para sua letra e diagnÃ³stico correspondente
const diagnosticos = {
    "Iniciante": { letra: "A", titulo: "Iniciante: O Fantasma do Medo" },
    "Em Crescimento": { letra: "B", titulo: "Em Crescimento: O Fantasma da ConfusÃ£o" },
    "Consolidado": { letra: "C", titulo: "Consolidado â€“ O Fantasma da EstagnaÃ§Ã£o" },
    "VisionÃ¡rio": { letra: "D", titulo: "VisionÃ¡rio â€“ O Fantasma da IlusÃ£o" }
};
// --- FIM DA BASE DE CONHECIMENTO ---

/**
 * Endpoint para receber as respostas e retornar o diagnÃ³stico.
 * MÃ©todo: POST
 * URL: /diagnostico
 * Corpo da RequisiÃ§Ã£o (JSON):
 * {
 * "respostas": [
 * "String com a resposta da primeira pergunta",
 * "String com a resposta da segunda pergunta",
 * ...
 * ]
 * }
 */
app.post('/diagnostico', (req, res) => {
    // Pega o array de respostas do corpo da requisiÃ§Ã£o
    const { respostas } = req.body;

    // ValidaÃ§Ã£o bÃ¡sica
    if (!respostas || !Array.isArray(respostas) || respostas.length === 0) {
        return res.status(400).json({ error: 'O campo "respostas" Ã© obrigatÃ³rio e deve ser um array de strings.' });
    }

    // Objeto para contar a frequÃªncia de cada perfil
    const contagem = {
        "Iniciante": 0,
        "Em Crescimento": 0,
        "Consolidado": 0,
        "VisionÃ¡rio": 0
    };

    // Itera sobre as respostas enviadas pelo usuÃ¡rio
    for (const resposta of respostas) {
        const perfil = respostasParaPerfil[resposta];
        if (perfil) {
            contagem[perfil]++;
        }
    }

    // Encontra o perfil com a maior contagem
    let perfilFinal = "Iniciante"; // Perfil padrÃ£o
    let maxContagem = 0;
    for (const perfil in contagem) {
        if (contagem[perfil] > maxContagem) {
            maxContagem = contagem[perfil];
            perfilFinal = perfil;
        }
    }

    // Pega o diagnÃ³stico correspondente (letra e tÃ­tulo)
    const diagnosticoFinal = diagnosticos[perfilFinal];

    // Retorna a resposta final no formato JSON
    res.status(200).json({
        diagnosticoFinal: diagnosticoFinal.letra,
        perfil: diagnosticoFinal.titulo,
        detalhesContagem: contagem // Opcional: para ver a contagem de cada perfil
    });
});

// Inicia o servidor na porta definida
app.listen(PORT, () => {
    console.log(`ðŸš€ Servidor rodando em http://localhost:${PORT}`);
});